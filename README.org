#+title: Tusk

a simple opinionated web library to be used alongside nginx or apache

* How to use it
Create a public folder with your =index.php= there and just:

#+begin_src php
  const BASE_PATH = __DIR__ . '/../';
  require BASE_PATH . 'libs/tusk/init.php';
#+end_src

It is necessary to have a =config.php= for configuring where should tusk look for things. I recommend creating a =globals.php= too, for variables that uses =define()=.

** Local Development
For development I like to use php built-ins web server. Create a =Makefile= at the top level with the following:

#+begin_src makefile
  all: run

  run:
      @echo "starting server..."
      @php -S localhost:8080 -t ./public/ --php-ini=./php.ini # optional, I don't like to mess with my global php.ini

  # add more stuff as you go
#+end_src

You'll probably need a .env file with the following too:

#+begin_src env
DB=sqlite # sqlite | pgsql | mysql
DB_URL=db.sqlite
# works for pgsql | mysql
DB_HOST=localhost
DB_PORT=8080
DB_USER=admin
DB_PASSWORD=admin
DB_NAME=dbname
#+end_src

** Directories and Files
Tusk expect a route based directory structure. Every endpoint has a corresponding directory. Pages goes inside =web/=, it expects a =main.php= for the controller and a =view.php= for it's view if it has one. If you plan on doing purely REST API's you can pass the entire path to the file instead of just the route e.g.

#+begin_src php
  controller("web/my/route.php");
  // the common way is to have a main.php in the route dir
  controller("web/my/route/"); // web/my/route/main.php
#+end_src

** Config.php Example
#+begin_src php
  return [
      // The WEB_DIR constant tells where the pages are. Same for the API_DIR
      "WEB_DIR"             => "web",
      "API_DIR"             => "api",

      // Name of the dir each route will have for small pieces of html snippets
      // Example: web/home/snippets/contact_form.php
      "COMPONENTS_DIR_NAME" => "snippets",

      // Where tusk should look for important and reproducible html, like <head/>,
      // <nav/>, <footer/>, etc...
      "PARTIALS_DIR"        => "web/partials",

      // Directory for tusk to look when using tusk\icon() and tusk\svg()
      "ICONS_DIR"           => "public/svg/icons",
      "SVG_DIR"             => "public/svg",

      // Where error pages are located, like the famous "404 Not Found :("
      "ERROR_PAGES_DIR"     => "web/errors",
  ];
#+end_src

** Index.php example
#+begin_src php
  use tusk\Route;

  const BASE_PATH = __DIR__ . '/../';
  require BASE_PATH . 'libs/tusk/init.php';
  require BASE_PATH . 'globals.php';

  const route = new Route(URL['path']);

  route
      ->redirect(from: '/', to: '/home')
      ->path('/home', 'web/')
      ->path('/user/:name(word)', 'web/user/')
      ->path('/user/:name(word)/profile', 'web/user/profile/');
#+end_src

You can access =:name(word)= variable using =route->param("name")= function inside the controller.

* Contributing
I don't plan on supporting this more than what I need. If you have something to add up, try your luck, I might not answer it. If I like it I'll accept probably. I accept bug reports tho.

* Fixes
 * [ ] Find a way to fix this:
   - =/obj/:name(word)= would translate to =$obj_name= and =/prop/:name(word)= would become =$prop_name=.
   - How the =\tusk\view()= would handle =/obj/:name(word)/section=?
   #+begin_src php
     const route = new Route(URL['path']);
     route
         ->path('/obj/:name(word)/section', 'web/obj/section/')
         ->path('/api/obj/:name(word)/props', 'api/obj/props.php')
         ->path('/api/obj/:name(word)/prop/:name(word)', 'api/obj/prop_name.php')
   #+end_src
